[{"id":"616a1243.c2ee5c","type":"http in","z":"1f04971e.2062a9","name":"test_1","url":"/map","method":"get","swaggerDoc":"","x":188,"y":473,"wires":[["6d4aadb7.05e0d4"]]},{"id":"6d4aadb7.05e0d4","type":"template","z":"1f04971e.2062a9","name":"Test Data","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<!DOCTYPE html>\n    <html> \n    <head> \n       <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"/> \n       <title>Google Maps API v3 Directions Example</title> \n       <script type=\"text/javascript\" \n               src=\"http://maps.google.com/maps/api/js?sensor=false\"></script>\n    </head> \n    <body style=\"font-family: Arial; font-size: 12px;ActiveOX\"> \n       <div style=\"width: 800px;\">\n         <div id=\"map\" style=\"width: 480px; height: 700px; float: left;\"></div>\n         <div id=\"duration\">Duration: </div>\n         <div id=\"distance\">Distance: </div>\n         <div id=\"InsideCircle\"> Inside/Outside:</div>\n         <div id = \"test\"> Test: </div>\n         <div id=\"panel\" style=\"width: 300px; float: right;\"></div>\n       </div>\n       \n      \n       <script type=\"text/javascript\">\n    \n    var HttpClient = function() {\n        this.get = function(aUrl, aCallback) {\n            var anHttpRequest = new XMLHttpRequest();\n            anHttpRequest.onreadystatechange = function() { \n                if (anHttpRequest.readyState == 4 && anHttpRequest.status == 200)\n                    aCallback(anHttpRequest.responseText);\n            }\n\n            anHttpRequest.open( \"GET\", aUrl, true );            \n            anHttpRequest.send( null );\n        }\n    }\n\n\n        var flag = 0 //Flags us to send signal to Raspberry pi through node-red!\n        \n        function ie_writeFile()\n        {\n            var client = new HttpClient();\n            client.get('http://192.168.137.90:1880/file?flag=1', function(response) {\n                console.log(response.flag);\n            });\n            \t\n        }\n        \n        function modBinarySearch(arr,x){\n            var mid;\n            var low = 0;\n            var high = arr.length - 1;\n            while(high - low > 1){\n                mid = Math.floor((low+high)/2)\n                if(arr[mid]>x){\n                    low = mid\n                }\n                else{\n                    high = mid\n                }\n                //console.log(low,high)\n            }\n            if (x - arr[low] <= x-arr[high]) {\n                //console.log(\"low\",low)\n                return low;\n            }\n            //console.log(\"high\",high)\n            return high;\n        }\n       \n       //Function used to simulate a moving object!\n       //function animateMarker(marker, startPos, delay, coords_lat, coords_lng, km_h,closetPointIndex)\n       function animateMarker(marker, startPos, coords_lat, coords_lng, dist2Home, km_h, closetPointIndex, home, radius, t_0)\n       \n       {\n           var directionsService1 = new google.maps.DirectionsService();\n           \n           \n           \n           var request1 = {\n               origin: new google.maps.LatLng(coords_lat[closetPointIndex], coords_lng[closetPointIndex]),\n               destination: home,\n               travelMode: google.maps.DirectionsTravelMode.DRIVING\n           };\n           \n           directionsService1.route(request1, function(response, status) {\n                                    if (status == google.maps.DirectionsStatus.OK) {\n                                    var timeToHome = response.routes[0].legs[0].duration.value;\n                                    console.log(\"Time to home for closest point outside circle is\",timeToHome)\n                                    \n                                    }\n                                    else{\n                                    alert(\"Fail\");\n                                    }\n            });\n                                    \n           var count = 0;               \n           var target = 0;\n           var delay = 10;\n           var km_h = 400; //120;//km_h || 50;\n           //var km_h = km_h || 50;\n           \n           function goToPoint()\n           {\n               var lat = marker.position.lat();\n               var lng = marker.position.lng();\n               var step = (km_h * 1000 * delay) / 3600000; // in meters\n               \n               var dest = new google.maps.LatLng(coords_lat[target], coords_lng[target]);\n                                                 \n               var distance = google.maps.geometry.spherical.computeDistanceBetween(dest, marker.position); // in meters\n                                                                                                       \n               var numStep = distance / step;\n               var i = 0;\n               var deltaLat = (coords_lat[target] - lat) / numStep\n               var deltaLng = (coords_lng[target] - lng) / numStep;\n               \n               if(target > closetPointIndex){// && google.maps.geometry.spherical.computeDistanceBetween(home,dest)<= radius) {\n                   var request1 = {\n                       origin: new google.maps.LatLng(coords_lat[target], coords_lng[target]),\n                       destination: home,\n                       travelMode: google.maps.DirectionsTravelMode.DRIVING\n                   };\n                   \n                   directionsService1.route(request1, function(response, status) {\n                                    if (status == google.maps.DirectionsStatus.OK) {\n                                            var timeToHome = response.routes[0].legs[0].duration.value;\n                                            console.log(\"Time to home for \")\n                                            console.log(coords_lat[target], coords_lng[target])\n                                            console.log(\" is\",timeToHome)\n                                            if(timeToHome <= t_0 && count == 0) {\n                                                count = 1;\n\t\t\t\t\t\t                        ie_writeFile();\n                                                console.log(\"YESSS!!!!! Light the LED\")\n                                            }\n                                    }\n                                    else{\n                                        alert(\"Fail\");\n                                    }\n                    });\n               }\n               \n               function moveMarker(){\n                        lat += deltaLat;\n                        lng += deltaLng;\n                        i += step;\n                                                                                                           \n                        if (i < distance){\n                            marker.setPosition(new google.maps.LatLng(lat, lng));\n                            setTimeout(moveMarker, delay);\n                        }\n                        else{\n                            marker.setPosition(dest);\n                            target++;\n                            \n                            if (target == coords_lat.length){  return;}\n                            setTimeout(goToPoint, delay);\n                        }\n               }\n               moveMarker();\n           }\n           goToPoint();\n        }\n       \n       \n       \n         var home = new google.maps.LatLng(48.2625119,11.6660925) //User's Home Location - TUM Informatics Garching\n         \n         var t_0 = 100 //Delay time for thermo is 10 seconds\n         var maxAllowedSpeed = 90*1000/3600 //90 km/h\n         var maxDist = t_0 * maxAllowedSpeed//Max distance that user can travel in t_0 time with a speed of 90km/h\n         \n         console.log(\"Delay by Thermostat\",t_0)\n         console.log(\"Max Allowed spped: \",maxAllowedSpeed)\n         console.log(\"Max Distance travelled in \",t_0,\" time with a speed of \", maxAllowedSpeed,\"km/h is \",maxDist)\n         \n         var startPoint = new google.maps.LatLng(48.2359062,11.5578799) //AllianzArena/48.2359062,11.5578799/  //Start point for driving towards home\n         \n         \n         var directionsService = new google.maps.DirectionsService();\n         var directionsDisplay = new google.maps.DirectionsRenderer();\n         \n         var map = new google.maps.Map(document.getElementById('map'), {\n           zoom:7,\n           mapTypeId: google.maps.MapTypeId.ROADMAP\n         });\n         \n         //Marker for animating moving car\n         marker = new google.maps.Marker({\n                                         position: startPoint,\n                                         map: map\n                                         });\n                                         \n         //Draw a circle of maxDist Radius around home\n         var myHomeCircle = new google.maps.Circle({\n                                                   strokeColor: '#FF0000',\n                                                   strokeOpacity: 0.8,\n                                                   strokeWeight: 2,\n                                                   fillColor: '#FF0000',\n                                                   fillOpacity: 0.35,\n                                                   map: map,\n                                                   center: home,\n                                                   radius: maxDist\n                                             });\n                                                            \n         //Display the map and directions in the panel\n         directionsDisplay.setMap(map);\n         directionsDisplay.setPanel(document.getElementById('panel'));\n         \n         //Path from startPoint to home\n         var request = {\n           origin: startPoint,\n           destination: home,\n           travelMode: google.maps.DirectionsTravelMode.DRIVING\n         };\n    \n         //var movingPoint = new google.maps.LatLng(48.182595,11.569910) //Test Point!\n         \n         directionsService.route(request, function(response, status) {\n         if (status == google.maps.DirectionsStatus.OK) {\n                                 document.getElementById('duration').innerHTML +=(response.routes[0].legs[0].duration.value/60) + \" Mins\";\n                                 document.getElementById('distance').innerHTML +=(response.routes[0].legs[0].distance.value/1000) + \" Km\";\n             \n                                 //Display the directions\n                                 directionsDisplay.setDirections(response);\n                                 \n                                 //Get overview points\n                                 var overView = response.routes[0].overview_path;\n                                 console.log(overView.length)\n                                 \n                                 //Initialise overView Path array\n                                 var overViewPathPoints = new Array(3)\n                                 for(var j=0;j<3;j++){\n                                 overViewPathPoints[j]=new Array(overView.length)\n                                 }\n                                 \n                                 //Make an array of long, lat and distance from home for every point.\n                                 for(var pointNum = 0 ; pointNum < overView.length;pointNum++) {\n                                    overViewPathPoints[0][pointNum] = overView[pointNum].lat()\n                                    overViewPathPoints[1][pointNum] = overView[pointNum].lng()\n                                    movingPoint1 = new google.maps.LatLng(overView[pointNum].lat(),overView[pointNum].lng())\n                                    overViewPathPoints[2][pointNum] = google.maps.geometry.spherical.computeDistanceBetween(myHomeCircle.getCenter(),movingPoint1)\n                                    console.log(pointNum,overView[pointNum].lat(),overView[pointNum].lng(),overViewPathPoints[2][pointNum])\n                                 }\n                                 \n                                 //Find point just greater than maxDist\n                                 var closetPointIndex = modBinarySearch(overViewPathPoints[2], maxDist)\n                                 console.log(\"Closest Point (Just outside circle) is \", closetPointIndex, overViewPathPoints[0][closetPointIndex],overViewPathPoints[1][closetPointIndex],overViewPathPoints[2][closetPointIndex])\n\n                                 //Moving Marker\n                                 var speed = 80; //Speed of marker\n                                 google.maps.event.addListenerOnce(map, 'idle', function(){\n                                                                animateMarker(marker,startPoint,overViewPathPoints[0],overViewPathPoints[1], overViewPathPoints[2],speed,closetPointIndex,myHomeCircle.getCenter(),maxDist,t_0);\n                                 });\n                                \n                                 \n                                 \n           }else{\n             alert(\"Fail\");\n           }\n         });\n         \n         \n         \n         \n       </script> \n    </body> \n    </html>","x":399,"y":474,"wires":[["dfaa8728.1df998"]]},{"id":"dfaa8728.1df998","type":"http response","z":"1f04971e.2062a9","name":"Output","x":625,"y":473,"wires":[]},{"id":"71979414.80634c","type":"template","z":"1f04971e.2062a9","name":"Flag","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"{{payload.flag}}","x":438,"y":666,"wires":[["6c62970b.1327b8"]]},{"id":"2c603748.478928","type":"http in","z":"1f04971e.2062a9","name":"","url":"/file","method":"get","swaggerDoc":"","x":270,"y":565,"wires":[["1374b6a1.e69b19","71979414.80634c"]]},{"id":"1374b6a1.e69b19","type":"http response","z":"1f04971e.2062a9","name":"File","x":395,"y":796,"wires":[]},{"id":"6c62970b.1327b8","type":"rpi-gpio out","z":"1f04971e.2062a9","name":"led0","pin":"7","set":true,"level":"0","out":"out","x":618,"y":727,"wires":[]}]